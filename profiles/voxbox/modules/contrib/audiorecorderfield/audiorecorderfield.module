<?php
/**
 * Implementation of hook_init().
 *
 * Load required includes.
 */
 
 // API hooks should always be available to make it compatible with drush updatedb
 module_load_include('inc', 'audiorecorderfield', 'audiorecorderfield_widget');
function audiorecorderfield_init() {
  module_load_include('inc', 'audiorecorderfield', 'include/nanogong');
  module_load_include('inc', 'audiorecorderfield', 'include/soundcloud');
  module_load_include('inc', 'audiorecorderfield', 'include/wav_player');
  module_load_include('inc', 'audiorecorderfield', 'sources/recorder');
  // Add Javascript settings
  drupal_add_js(array('audiorecorderfield_path' =>  drupal_get_path('module', 'audiorecorderfield')), 'setting');
}
/**
 * Implementation of hook_menu().
 */
function audiorecorderfield_menu() {
  $items['audiorecorderfield_file_receive'] = array(
    'title' => 'file_receive',
    'description' => '',
    'page callback' => 'audiorecorderfield_file_receive',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   $items['audiorecorderfield_file_preview'] = array(
    'title' => 'audiorecorderfield_file_preview',
    'description' => '',
    'page callback' => 'audiorecorderfield_file_preview',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   $items['audiorecorderfield_recorder_reload'] = array(
    'title' => 'audiorecorderfield_recorder_reload',
    'description' => '',
    'page callback' => 'audiorecorderfield_recorder_reload',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
   );
   
   return $items;
}

/*Ajax callback function that saves recorded file*/
function audiorecorderfield_file_receive() {
   $recorder = audiorecorderfield_get_recorder();
   call_user_func($recorder['file_receive']);
}

/*Ajax callback function that creates file preview of uploaded file*/
function audiorecorderfield_file_preview() {
    $fid = $_GET['fid'];
    $file=db_fetch_array(db_query("SELECT * FROM {files} WHERE fid=%d", $fid));
    $audiofile=file_create_url($file['filepath']);
    $info = pathinfo($file['filename']);
    $op=$info['extension'];
    $player = "<div id='audiorecorderfield-".$_GET['field_name']."-".$_GET['delta']."-wrapper'>".audiofield_get_player($audiofile, $op)."</div>"; 
    return drupal_json(array('field_name' => $_GET['field_name'], 'player' => $player, 'delta' => $_GET['delta']));
    exit();
}

/*Ajax callback function that reloads the recorder*/
function audiorecorderfield_recorder_reload() {
  $recorder = audiorecorderfield_get_recorder();
  $element['#field_name'] = $_GET['field_name'];
  $element['#delta'] = $_GET['delta'];
  
  $recorder_reloaded = $recorder['callback']($element, NULL);
  return drupal_json(array('recorder' => $recorder_reloaded));
  exit();
}

/**
 * Implementation of hook_elements().
 */
function audiorecorderfield_elements() {
  $elements = array();
  $filefield_elements = filefield_elements();
  $elements['audiorecorderfield_widget'] = $filefield_elements['filefield_widget'];

  //Process callback to render Nanogong recording applet
  $elements['audiorecorderfield_widget']['#process'] = array('audiorecorderfield_widget_process');
 // $elements['audiorecorderfield_widget']['#process'] []= 'audiorecorderfield_widget_process';
  $elements['audiorecorderfield_widget']['#value_callback'] = 'audiorecorderfield_widget_value';
  return $elements;
}

/**
 * Implementation of hook_filefield_sources_widgets().
 *
 * This returns a list of widgets that are compatible with FileField Sources.
 */
function audiorecorderfield_filefield_sources_widgets() {
  return array('audiorecorderfield_widget');
}

/**
 * Implementation of hook_filefield_sources_info().
 */
function audiorecorderfield_filefield_sources_info() {
  $params = array();
  $return = array();
  
    $function = 'filefield_source_recorder_info';
    if (function_exists($function)) {
      $result = call_user_func_array($function, $params);
      if (isset($result) && is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  
  return $return;
}

/**
 * Implementation of hook_theme().
 */
function audiorecorderfield_theme() {
  $theme= array(
      'audiorecorderfield_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiorecorderfield_widget.inc',
      ),
      //Theme for the recorders
       'audiorecorderfield_soundcloud' => array(
       'arguments' => array('element' => NULL),
       'file' => 'include/soundcloud.inc',
      ),
      //Soundcloud skin
       'audiorecorderfield_soundcloud_skin' => array(
       'arguments' => array('element' => NULL, 'delta' => NULL),
       'file' => 'include/soundcloud.inc',
      ),
      //Wav player theme
       'audiorecorderfield_wav_player' => array(
       'arguments' => array('player_path'=> NULL, 'audio_file' => NULL),
       'file' => 'include/wav_player.inc',
      ),
      //Theme for recorder filefield source
       'filefield_source_recorder_element' => array(
       'arguments' => array('element' => NULL),
       'file' => 'sources/recorder.inc',
      ),
  );

  return $theme;
}

/**
 * Implementation of hook_widget_info().
 */
function audiorecorderfield_widget_info() {
  return array(
    'audiorecorderfield_widget' => array(
      'label' => t('Audio Recorder'),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'description' => t('Widget for recording audios.'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function audiorecorderfield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      return audiorecorderfield_widget_settings_form($widget);
    case 'save':
      return audiorecorderfield_widget_settings_save($widget);
  }
}

/**
 * Implementation of hook_widget().
 * 
 * Assign default properties to item and delegate to audiorecorderfield.
 */
function audiorecorderfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // Start with the audiorecorderfield widget as a basic start.
  // Note that audiorecorderfield needs to modify $form by reference.
  $element = filefield_widget($form, $form_state, $field, $items, $delta);

  return $element;
}

/**
 * Implementation of CCK's hook_default_value().
 */
function audiorecorderfield_default_value(&$form, &$form_state, $field, $delta) {
  return filefield_default_value($form, $form_state, $field, $delta);
}

/**
 * Implementation of hook_form_[form_id]_alter().
 *
 * Modify the add new field form to change the default formatter.
 */
function audiorecorderfield_form_content_field_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'audiorecorderfield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new field's formatter to "audiofield_embedded".
 */
function audiorecorderfield_form_content_field_overview_submit(&$form, &$form_state) {
  if (isset($form_state['fields_added']['_add_new_field']) && isset($form['#type_name'])) {
    $new_field = $form_state['fields_added']['_add_new_field'];
    $node_type = $form['#type_name'];
    $field = content_fields($new_field, $node_type);
    if ($field['widget']['module'] == 'audiorecorderfield') {
      foreach ($field['display_settings'] as $display_type => $display_settings) {
        if ($field['display_settings'][$display_type]['format'] == 'default') {
          $field['display_settings'][$display_type]['format'] = 'audiofield_embedded';
        }
      }
      content_field_instance_update($field);
    }
  }
}

/**
 * Implementation of hook_audiofield_players().
 */
function audiorecorderfield_audiofield_players() {
    $players['nanogong']=array(
      'path' => drupal_get_path('module', 'audiorecorderfield') . '/recorders/nanogong.jar',
      'name' => 'Nanogong',
      'download_link' => 'http://gong.ust.hk/nanogong/downloads_form.html',
      'filetypes' => array('wav'),
      'callback' => 'audiorecorderfield_nanogong_player',
    );
    
    $players['wav_player']=array(
      'path' => variable_get('audiofield_players_dir', 'sites/all/libraries/player') . '/wavplayer.swf',
      'name' => 'Wav Player',
      'download_link' => 'https://github.com/francois2metz/WavPlayer',
      'filetypes' => array('wav'),
      'callback' => 'audiorecorderfield_wav_player',
    );

    return $players;
}

function audiorecorderfield_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'audiofield_admin_settings_form') {
    $audio_recorders=audiorecorderfield_recorders();
    $recorders=array();
    $element['#field_name'] = 'audiofield_config';
    $element['#delta'] = '0';
    foreach ($audio_recorders as $id => $recorder) {
        $recorders[$id] = $recorder['name'] . '<br/>' . call_user_func_array($recorder['callback'],$element);
    }
    
    $form['audiofield_audiorecorder'] = array(
      '#type' => 'radios',
      '#title' => t('Audio Recorders'),
      '#options' => $recorders,
      '#weight' => 1,
      '#default_value' => variable_get('audiofield_audiorecorder', 0),
   );
   $form["buttons"]["#weight"]=50;
  }
}

/**
 * Implementation of hook_audiorecorderfield_recorders().
 */
function audiorecorderfield_recorders() {
  $recorders = module_invoke_all('audiorecorderfield_recorders');
    
  $recorders['nanogong'] = array(
    'path' => drupal_get_path('module', 'audiorecorderfield') . "/recorders/nanogong.jar",
    'name' => 'Nanogong Applet Recorder',
    'callback' => 'audiorecorderfield_recorder_nanogong',
    'file_receive' => 'audiorecorderfield_nanogong_file_receive',
  );
  
  $recorders['soundcloud'] = array(
    'path' => drupal_get_path('module', 'audiorecorderfield') . "/recorders/recorder.swf",
    'name' => 'Soundcloud Flash Recorder',
    'callback' => 'audiorecorderfield_recorder_soundcloud',
    'file_receive' => 'audiorecorderfield_soundcloud_file_receive',
  );
  
  return $recorders;
}

/**
 * Get the object for the suitable player for the parameter resource
*/
function audiorecorderfield_get_recorder() {
  $audio_recorders = audiorecorderfield_recorders();
  $recorder = $audio_recorders[variable_get('audiofield_audiorecorder', 'nanogong')];
  return $recorder;
}

function audiorecorderfield_str_replace_once($str_pattern, $str_replacement, $string){
       $occurrence = strpos($string, $str_pattern);
        if ($occurrence !== false && $occurrence===0){
            return substr_replace($string, $str_replacement, strpos($string, $str_pattern), strlen($str_pattern));
        }
        return $string;
    } 